import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import console from "console";
import {writeFile} from "fs/promises";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

fs.copyFile("manifest.json", "dist/manifest.json", (err) => {
    if (err) console.log(err);
});
fs.copyFile("styles.css", "dist/styles.css", (err) => {
    if (err) console.log(err);
});

const prod = process.argv[2] === "production";

const context = await esbuild.context({
    banner: {
        js: banner
    },
    entryPoints: ["src/main.ts"],
    bundle: true,
    external: [
        "obsidian",
        "electron",
        "@codemirror/autocomplete",
        "@codemirror/collab",
        "@codemirror/commands",
        "@codemirror/language",
        "@codemirror/lint",
        "@codemirror/search",
        "@codemirror/state",
        "@codemirror/view",
        "@lezer/common",
        "@lezer/highlight",
        "@lezer/lr",
        ...builtins
    ],
    format: "cjs",
    target: "es2020",
    logLevel: "info",
    sourcemap: prod ? false : "inline",
    treeShaking: true,
    minify: prod,
    outdir: "dist",
    metafile: prod,
});

if (prod) {
    const result = await context.rebuild();

    await writeFile("dist/meta.json", JSON.stringify(result.metafile, undefined, 2));
    process.exit(0);
} else {
    await context.watch();
}
